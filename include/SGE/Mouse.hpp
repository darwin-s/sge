// Copyright 2020 Dan Sirbu
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#ifndef SGE_MOUSE_HPP
#define SGE_MOUSE_HPP

#include <SGE/Export.hpp>
#include <string>

namespace sge {
class Window;

/**
 * \brief Class representing the mouse
 *
 *
 * This class is used to represent the mouse on the user's machine.
 * It describes the mouse buttons and the events generated by a mouse button press.
 * The current state of the mouse buttons can be polled through a function.
 * \note The functions in this class should only be called from the main thread
 */
class SGE_API Mouse {
public:
    /**
     * \brief Mouse buttons
     *
     *
     * Represents the buttons on a mouse
     */
    enum class Button {
        Left,
        Right,
        Middle,
        Mb4,
        Mb5,
        Mb6,
        Mb7,
        Mb8
    };

    /**
     * \brief Mouse button state
     *
     *
     * Represents the state of a mouse button
     */
    enum class ButtonState {
        Pressed, ///< Mouse button was pressed
        Released ///< Mouse button was released
    };

    /**
     * \brief Mouse button event
     *
     *
     * Represents an event generated by the mouse buttons.
     */
    struct MouseButtonEvent {
        Button button; ///< The mouse button that changed it's state
        ButtonState state; ///< The new state of the mouse button
        bool ctrl; ///< Ctrl was held
        bool shift; ///< Shift was held
        bool alt; ///< Alt was held
        bool system; ///< System(Windows) key was held
        bool capsLock; ///< Caps lock was enabled
        bool numLock; ///< Num lock was enabled
    };

    /**
     * \brief Get button from internal representation
     *
     *
     * Returns a Mouse::Button from an internally used integer.
     * \param button The internal code of the button
     * \return Mouse::Button type
     */
    static Button getButtonFromInternal(int button);

    /**
     * \brief Get the internal representation of a mouse button
     *
     *
     * Returns the internal integer used to represent the Mouse::Button type.
     * \param button Mouse::Button type
     * \return Integer used to represent the button
     */
    static int getCodeFromButton(Button button);

    /**
     * \brief Get mouse button name
     *
     *
     * Returns the human-readable name of a mouse button from it's Mouse::Button representation.
     * \param button Mouse::Button type
     * \return String containing the button name
     */
    static std::string getButtonName(Button button);

    /**
     * \brief Get button state
     *
     *
     * Returns the current mouse button state for a window.
     * \param window Window to pe polled for the state of the button
     * \param button The Mouse::Button type
     * \return State of the mouse button
     */
    static ButtonState getButtonState(const Window& window, Button button);

    /**
     * \brief Quarry for raw mouse input support
     *
     *
     * Quarries the system for raw mouse input support.
     * \return true if raw mouse input is supported, false otherwise
     */
    [[nodiscard]] static bool isRawInputSupported();
};
}

#endif //SGE_MOUSE_HPP
