// Copyright 2020 Dan Sirbu
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#ifndef SGE_EVENTHANDLER_HPP
#define SGE_EVENTHANDLER_HPP

#include <SGE/Export.hpp>
#include <SGE/Keyboard.hpp>
#include <SGE/Mouse.hpp>
#include <glm/vec2.hpp>

namespace sge {
/**
 * \brief Base class for event handlers
 *
 *
 * This class is used as a base for objects that can handle
 * events based on the windows, keyboard and mouse actions.
 * This is used mostly as a window event handler, although the fact
 * that this object does not hold any references or pointers means
 * that custom game objects can handle custom events such as window
 * resizing, which gives this class a little bit more flexibility.
 */
class SGE_API EventHandler {
public:
    virtual ~EventHandler() = default;

    /**
     * \brief Handle window closing
     *
     * This event is called when the window is about to close, but
     * it can still be prevented.
     */
    virtual void windowCloseEvent();

    /**
     * \brief Handle window resizing
     *
     *
     * This event is called when the window is being resized on the screen.
     * \param size The new size of the window in virtual units
     */
    virtual void windowResizeEvent(const glm::ivec2& size);

    /**
     * \brief Handle window positioning
     *
     *
     * This event is called when the window changes position on the screen.
     * \param pos New window position in virtual units
     */
    virtual void windowPositionEvent(const glm::ivec2& pos);

    /**
     * \brief Handle window minimization
     *
     *
     * This event is called when the window is minimized
     */
    virtual void windowMinimizeEvent();

    /**
     * \brief Handle window maximization
     *
     *
     * This event is called when the window is maximized.
     */
    virtual void windowMaximizeEvent();

    /**
     * \brief handle window restoration
     *
     *
     * This event is called when the window is restored to it's
     * normal size.
     */
    virtual void windowRestoredEvent();

    /**
     * \brief Handle the gaining of focus
     *
     *
     * This event is called when the window gains focus.
     */
    virtual void windowGainedFocusEvent();

    /**
     * \brief Handle losing of focus
     *
     *
     * This event is called when the window loses focus.
     */
    virtual void windowLostFocusEvent();

    /**
     * \brief Handle window refreshing
     *
     * This event is called when the contents of the window should be redrawn.
     * \note This event is usually only called when resizing or moving the window.
     * \note Do not rely on this event to draw the window's contents.
     */
    virtual void windowRefreshEvent();

    /**
     * \brief Handle keyboard
     *
     * This event is called when a key on the keyboard is pressed.
     * \param event The event generated by the keyboard
     * \sa Keyboard::KeyboardEvent
     */
    virtual void keyboardEvent(Keyboard::KeyboardEvent event);

    /**
     * \brief Handle text input
     *
     * This event is called when text is being input into the window.
     * \param text UTF-8 encoded text
     */
    virtual void textInputEvent(const char* text);

    /**
     * \brief Handle cursor position change
     *
     * This event is called when the cursor changes position. If the mouse
     * is in relative mode, this will represent the amount the mouse has moved.
     * Otherwise this represents the mouse position relative to the top left corner
     * of the window.
     * \param pos New position of the cursor
     */
    virtual void cursorPositionEvent(const glm::ivec2& pos);

    /**
     * \brief Handle cursor leaving
     *
     * This event is called when the cursor leaves the window's area.
     */
    virtual void cursorEnterEvent();

    /**
     * \brief Handle cursor entering
     *
     * This event is called when the cursor enters the window's area.
     */
    virtual void cursorLeaveEvent();

    /**
     * \brief Handle mouse button events
     *
     * This event is called when a mouse button is pressed.
     * \param event The event generated by the mouse button
     * \sa Mouse::MouseButtonEvent
     */
    virtual void mouseButtonEvent(Mouse::MouseButtonEvent event);

    /**
     * \brief Handle scrolling
     *
     * This event is called when the mouse scroll wheel is used.
     * \param scroll The scroll offset (x - horizontal scroll, y - vertical scroll)
     */
    virtual void scrollEvent(const glm::ivec2& scroll);
};
}

#endif//SGE_EVENTHANDLER_HPP
