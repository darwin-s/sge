// Copyright 2020 Dan Sirbu
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#ifndef SGE_MOUSE_HPP
#define SGE_MOUSE_HPP

#include <SGE/Export.hpp>
#include <glm/vec2.hpp>
#include <string>

namespace sge {
class Window;

/**
 * \brief Class representing the mouse
 *
 *
 * This class is used to represent the mouse on the user's machine.
 * It describes the mouse buttons and the events generated by a mouse button press.
 * The current state of the mouse buttons can be polled through a function.
 * \note The functions in this class should only be called from the main thread
 */
class SGE_API Mouse {
public:
    /**
     * \brief Mouse buttons
     *
     *
     * Represents the buttons on a mouse
     */
    enum class Button { Unknown, Left, Right, Middle, Mb4, Mb5 };

    /**
     * \brief Mouse button state
     *
     *
     * Represents the state of a mouse button
     */
    enum class ButtonState {
        Pressed,///< Mouse button was pressed
        Released///< Mouse button was released
    };

    /**
     * \brief Mouse button event
     *
     *
     * Represents an event generated by the mouse buttons.
     */
    struct MouseButtonEvent {
        Button button;    ///< The mouse button that changed it's state
        ButtonState state;///< The new state of the mouse button
        bool ctrl;        ///< Ctrl was held
        bool shift;       ///< Shift was held
        bool alt;         ///< Alt was held
        bool system;      ///< System(Windows) key was held
        bool capsLock;    ///< Caps lock was enabled
        bool numLock;     ///< Num lock was enabled
    };

    /**
     * \brief Get button from internal representation
     *
     *
     * Returns a Mouse::Button from an internally used integer.
     * \param button The internal code of the button
     * \return Mouse::Button type
     */
    [[nodiscard]] static Button getButtonFromInternal(int button);

    /**
     * \brief Get the internal representation of a mouse button
     *
     *
     * Returns the internal integer used to represent the Mouse::Button type.
     * \param button Mouse::Button type
     * \return Integer used to represent the button
     */
    [[nodiscard]] static int getCodeFromButton(Button button);

    /**
     * \brief Get mouse button name
     *
     *
     * Returns the human-readable name of a mouse button from it's Mouse::Button representation.
     * \param button Mouse::Button type
     * \return String containing the button name
     */
    [[nodiscard]] static std::string getButtonName(Button button);

    /**
     * \brief Get button state
     *
     *
     * Returns the current mouse button state.
     * \param button The Mouse::Button type
     * \return State of the mouse button
     */
    [[nodiscard]] static ButtonState getButtonState(Button button);

    /**
     * \brief Get mouse position
     *
     *
     * Get the cursor's position in virtual units.
     * \return Vector containing the mouse position
     */
    [[nodiscard]] static glm::ivec2 getMousePosition();

    /**
     * \brief Set mouse relative mode
     *
     * Sets whether the mouse is in relative mode, or not. When the mouse is in
     * relative mode, the cursor will remain hidden, and it's position will
     * remain fixed. Querying the mouse position will return the amount of
     * movement since last query.
     */
    static void setRelativeMode(bool active);

    /**
     * \brief Is mouse in relative mode
     *
     *
     * Returns whether the mouse is in relative mode.
     * \return true if mouse is in relative mode, false otherwise
     */
    static bool isInRelativeMode();

    /**
     * \brief Set mouse cursor visibility
     *
     *
     * Sets the visibility of the mouse cursor. Note that a hidden cursor
     * can still leave the window.
     * \param visible Whether to show the mouse or not
     */
    static void setCursorVisibility(bool visible);

    /**
     * \brief Is mouse cursor visible
     *
     *
     * Returns whether the mouse cursor is currently visible.
     * \return true if cursor is visible, false otherwise
     */
    static bool isCursorVisible();
};
}

#endif//SGE_MOUSE_HPP
